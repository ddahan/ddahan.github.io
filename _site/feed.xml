<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>david-dahan.com</title>
    <link rel="self" href="http://www.david-dahan.com/feed.xml"/>
    <link rel="alternate" type="text/html" href="http://www.david-dahan.com"/>
    <updated>2015-05-12T14:12:35+02:00</updated>
    <id>http://www.david-dahan.com</id>
    <author>
        <name>David Dahan</name>
    </author>
    
        <entry>
            <title type="html">Web scraping de Yelp avec Python et BeautifulSoup</title>
            <link href="http://www.david-dahan.com/post/web-scrapping"/>
            <published>2015-05-12T14:05:02+02:00</published>
            <id>http://www.david-dahan.com/post/web-scrapping</id>
            <content type="html">&lt;p&gt;Aujourd’hui, nous allons expliquer et réaliser ensemble un script de scraping (&lt;em&gt;explications ci-dessous&lt;/em&gt;) en utilisant le site de Yelp comme exemple.
Le code complet de ce tutoriel est disponible sur &lt;a href=&quot;https://github.com/ddahan?tab=repositories&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Qu’est-ce que le web scraping ?&lt;/h2&gt;

&lt;p&gt;Il s’agit d’une technique d’extraction du contenu d’un site web via un programme. Une fois les données extraites (dans un fichier Excel, XML, ou une base de données par exemple), on peut s’en servir comme on le souhaite.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://webdata-scraping.com/wp-content/uploads/2013/11/web-scraping-services.png&quot; alt=&quot;alt text&quot; title=&quot;scraping scheme&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Un exemple avec Yelp&lt;/h2&gt;

&lt;p&gt;Jetons un coup d’oeil au site de Yelp : ce dernier permet de parcourir les commerces locaux des grandes villes, en les filtrant de manière assez poussée (notation des utilisateurs, ville, arrondissement, type de commerce, sous-type de commerce, etc.)&lt;/p&gt;

&lt;p&gt;Pour notre part, nous allons essayer de récupérer : &lt;em&gt;Tous les commerces de telles catégories dans tels quartiers/arrondissements de Paris&lt;/em&gt;`. Pour chacun des commerces, nous réupérerons le nom, l’adresse, le numéro de téléphone, l&amp;#39;URL, et l’ensemble des catégories auxquelles il appartient (1 commerce appartient à 1-&amp;gt;N catégories. C’est logique : il peut vendre des bagels, mais aussi des sandwichs, ou des desserts).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Avertissement&lt;/strong&gt; : les conditions générales d’utilisation de Yelp interdisent ce genre de pratique, cet exercice est donc à visée pédagogique uniquement. S&amp;#39;il vous arrive malheur (IP bannie, etc.), tant pis ^^&lt;/p&gt;

&lt;p&gt;A noter que Yelp propose une API laissant penser à première vue que le scraping n’a aucun interêt supplémentaire. Cependant, cette API reste limitée, d’une part par le type de requête qu’elle permet d’effectuer, mais aussi par le nombre de résultats.&lt;/p&gt;

&lt;p&gt;Vous êtes toujours motivés ? Alors c’est parti !&lt;/p&gt;

&lt;h2&gt;1ère étape : analyser le fonctionnement du site à scraper&lt;/h2&gt;

&lt;p&gt;Avant de commencer la moindre ligne de code, vérifions si ce que nous souhaitons réaliser est possible (ce qui n’est pas garanti). Pour cela, direction &lt;a href=&quot;http://www.yelp.fr/search&quot;&gt;le site de Yelp&lt;/a&gt; !&lt;/p&gt;

&lt;h4&gt;1e constat : le contenu&lt;/h4&gt;

&lt;p&gt;Chaque page de recherche affiche les infos principales sur les commerces, ce qui sera suffisant pour notre tutoriel, sans que nous ayons besoin de rentrer dans les pages détaillées de chaque commerce.&lt;/p&gt;

&lt;h4&gt;2e constat : les filtres&lt;/h4&gt;

&lt;p&gt;Chaque application d’un filtre (ex : choix du type de commerce, choix des arrondissement parisiens) modifie l’URL en y ajoutant des variables de type GET. Par exemple lorsque je sélectionne la catégorie “Alimentation”, j&amp;#39;obtiens une URL du genre : &lt;code&gt;http://www.yelp.fr/search#cflt=food&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;C’est une bonne nouvelle puisque ça permettra à notre script d’être paramétrable, en générant les bonnes URL en fonction des filtres désirés.&lt;/p&gt;

&lt;h4&gt;3e constat : les catégories&lt;/h4&gt;

&lt;p&gt;Il semble qu&amp;#39;on ne puisse pas sélectionner plusieurs catégories en même temps. Donc si on veut faire une requête à la fois sur les bagels et les vétérinaires, il va falloir faire 2 recherches distinctes. C&amp;#39;est pas la mer à boire mais ça va nous rajouter une boucle dans notre programme&lt;/p&gt;

&lt;h4&gt;4e et dernier constat : la pagination&lt;/h4&gt;

&lt;p&gt;Chaque page affiche 10 résultats au maximum, avant de devoir nous rendre sur la page suivante. En allant en page 2, on se rend compte que l’URL a changé avec une nouvelle variable : &lt;code&gt;start=10&lt;/code&gt;. On comprend donc facilement que la page 1 contient les résultats de 0 à 9, la page 2 les résultats de 10 à 19, et la page 67 les résultats de 660 à 669.&lt;/p&gt;

&lt;p&gt;Maintenant que ça sent plutôt bon puisque tout est paramétrable au niveau URL, il va falloir vérifier que le site fonctionne de la même manière sans JavaScript. En effet, notre script n’est pas notre browser, et il n’est pas capable d’exécuter du code côté client.&lt;/p&gt;

&lt;p&gt;Pour cela, j’ai ouvert Firefox, désactivé le Javascript, et réessayé les étapes ci-dessus, en entrant cette-fois-ci directement les URLs complètes (avec les variables correspondant aux filtres), pour vérifier que les bons résultats s’affichent toujours correctement dans notre HTML. RAS, on va pouvoir commencer !&lt;/p&gt;

&lt;h2&gt;2e étape : le script&lt;/h2&gt;

&lt;p&gt;L’algorithme dans sa globalité va se présenter sous la forme d’une double boucle, suivi d&amp;#39;une écriture dans un fichier Excel :&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- Pour chacune des catégories :
   - Pour chaque page de résultats :
      - Générer l’URL de la page à aller scraper
      - Ouvrir cette page et passer le résultat HTML au parseur.
      - Pour chaque commerce (10 max par page) :
        - Récupèrer chacune des données souhaitées (nom, téléphone, etc.)
        - Si c&amp;#39;est un doublon ou une publicité, skipper ce tour de boucle.
        - Nettoyer les données (ex : retirer les trailing spaces)
        - Les placer dans un objet (de classe YelpShop par exemple)
        - Ajouter l’objet créé à une liste d’objets pour le sauver
- Pour chaque objet YelpShop créé :
  - Ecrire son contenu dans le fichier Excel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et voilà !&lt;/p&gt;

&lt;p&gt;Maintenant, nous allons étudier un peu plus en détail quelques parties intéressantes du code. Je ne vais pas coller les 200 lignes ici (ça ne serait pas intéressant), mais le script complet est disponible sur Github.&lt;/p&gt;

&lt;p&gt;Si jamais vous souhaitez refaire le projet de votre côté, vous devrez créer un virtualenv avec les packages suivants :&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;XlsxWriter==0.7.2
beautifulsoup4==4.3.2
requests==2.7.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Génération des URLs à scraper&lt;/h4&gt;

&lt;p&gt;Puisqu&amp;#39;on a vu qu&amp;#39;il y avait un lien direct entre le numéro de la page parcourue, et l&amp;#39;index à écrire en tant que variable dans l&amp;#39;URL, une petite fonction toute simple permet de passer de l&amp;#39;un à l&amp;#39;autre :&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;page_to_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;#39;&amp;#39;&amp;#39; Transforms page number into start index to be written in Yelp URL &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cela nous permet ensuite de construire simplement nos URLs, où vous pouvez voir qu&amp;#39;il s&amp;#39;agit simplement de concatener des variables à notre URL :&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_yelp_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;#39;&amp;#39;&amp;#39; Builds Yelp URL for the given page and cflt to be parsed according to&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    config variables &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.yelp.fr/search?&amp;amp;start={0}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_to_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp;find_loc={0}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp;cflt={0}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# We assume that CFLTS list is not empty&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PARIS_DISTRICTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp;l=p:FR-75:Paris::{0}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;build_arglist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARIS_DISTRICTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Parsing HTML&lt;/h4&gt;

&lt;p&gt;Nous utilisons ici la lib &lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/bs4/doc/&quot;&gt;BeautifulSoup&lt;/a&gt; qui permet de faire du parsing HTML très simplement.
Chaque commerce issu d&amp;#39;une page de résultat de recherche, est contenu dans une &lt;code&gt;&amp;lt;div class=&amp;quot;search-result&amp;quot;&amp;gt;&lt;/code&gt;. Ceci ne peut pas deviné autrement qu&amp;#39;en regardant le code source de Yelp (l&amp;#39;inspecteur Chrome est très pratique pour ça).
Pour récupérer chacune des portions HTML liées, il suffit donc de créer une liste :&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;search_results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&amp;quot;search-result&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}):&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Au sein de chacune de ces portions de HTML récupérées, récupérer le nom est très similaire, à la différence ici que le nom du commerce est situé dans un lien html :&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;shop_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&amp;quot;biz-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Le mécanisme est du même genre pour les autres informations à récupérer (adresse, téléphone, url, catégories, etc.)&lt;/p&gt;

&lt;h4&gt;Retrait des annonces Yelp&lt;/h4&gt;

&lt;p&gt;Certaines pages contiennent des annonces publicitaires qui viennent polluer nos résultats, puisque ces dernières ne correspondent en rien à nos filtres de recherche.
&amp;lt;!-- Annonce image --&amp;gt;
Pour les supprimer, il suffit d&amp;#39;observer la classe qui leur est associée, et d&amp;#39;écrire une fonction associée :&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_advertisement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;#39;&amp;#39;&amp;#39; Return True is the search result is an add &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;span&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&amp;quot;yloca-tip&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Un point sur le contournement de la sécurité&lt;/h4&gt;

&lt;p&gt;Scraper des sites web n’est généralement pas apprécié par les sites en questions (ce qui est tout à fait compréhensible). Partez donc du principe que ces derniers feront tout leur possible pour vous compliquer la vie. Voici deux mesures très simples qui vont réduire les chances d’être identifié comme un “robot” :&lt;/p&gt;

&lt;h6&gt;Durée d’attente aléatoire entre chaque ouverture de page&lt;/h6&gt;

&lt;p&gt;Si votre script ouvre 30 pages en 5 secondes, vous donnez le baton pour vous faire battre puisqu’un humain n’agirait à priori jamais de la sorte. L’idée est donc de générer un sleep aléatoire à la fin de chaque tour de la boucle principale :&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r_sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;#39;&amp;#39;&amp;#39; generates a random sleep between 2.000 and 10.000 seconds &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mylog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Safety Random Sleep has started for {0} sec&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mylog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Safety Random Sleep is over&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;Passage d’en-têtes à la requête HTTP&lt;/h6&gt;

&lt;p&gt;Comme vous le savez probablement, une requête HTTP créée par votre browser contient des en-têtes permettant au serveur de récupérer des informations telles que le navigateur utilisé, la version de votre OS, et beaucoup d’autres.
Dans notre script, nous allons donc spécifier manuellement ces en-têtes afin que le serveur pense qu’il s’agisse d’un navigateur classique.&lt;/p&gt;

&lt;p&gt;Notez qu’un site qui voudrait vraiment vous empêcher de scraper à tout prix, pourrait trouver d’autres moyens plus filous, comme un script JS qui analyserait les mouvements du pointeur de votre souris. Il y a d’ailleurs sûrement de nombreux autres méthodes que je ne connais pas.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;C&amp;#39;est terminé. N&amp;#39;hésitez pas à jeter un coup d&amp;#39;oeil au code complet, car les bouts de code expliqués ne sont pas suffisants pour tout comprendre.&lt;/p&gt;

&lt;p&gt;Pour améliorer ce script, on pourrait par exemple :
- rendre les fichiers xlsx créés évolutifs (on peut lancer le scrap pour mettre à jour uniquement les résultats qui ont changé, sans réécrire le fichier)
- écrire dans le fichier Excel au fur et à mesure plutôt qu&amp;#39;à la fin&lt;/p&gt;

&lt;p&gt;Avez vous d’autres idées d’amélioration ?&lt;/p&gt;

&lt;p&gt;Notez aussi que ce genre de script n&amp;#39;a aucune garantie de fonctionner à travers le temps, puisque la moindre modif du côté de Yelp casserait son fonctionnement. N&amp;#39;hésitez pas à me le signaler si c&amp;#39;est le cas.&lt;/p&gt;

&lt;p&gt;J&amp;#39;espère que pourra vous servir, à très bientôt !&lt;/p&gt;
</content>
            <author>
                <name>David Dahan</name>
            </author>
        </entry>
    
        <entry>
            <title type="html">Power Of Programming</title>
            <link href="http://www.david-dahan.com/post/power-of-programming"/>
            <published>2015-05-12T02:10:42+02:00</published>
            <id>http://www.david-dahan.com/post/power-of-programming</id>
            <content type="html">Programming seems to be an underrated job, especially in France. In this post, from my own experience, I&#39;ll try to explain why.

&lt;!--more--&gt;

&amp;nbsp;
&lt;h3&gt;&lt;b&gt;A strange way of thinking&lt;/b&gt;&lt;/h3&gt;
My French engineering school was specialized in programming so I had to work on lots of team programming projects in languages like C, C++, Java, Caml, etc. We used to work at night and all weekends.

Yet, many people around me, including teachers, said sentences like this during all my school time:

- &quot;Be careful, if you stay too long in a technical area, you will never get out of it!&quot;

- &quot;Start with coding, it&#39;s OK, then you&#39;ll evolve towards a project manager job...&quot;

- &quot;You should outsource all your coding tasks to Chinese or Indian people.&quot;

These sentences reveal how some French people think: coding is just something than anyone can do, with no added value. According to these people, if you want a respectable career (the one your parents would be proud of), the only way to get it  is to get out of technical shit and get responsibilities by managing other people. On top of that, telling &quot;I&#39;m a programmer&quot; to a pretty girl is a good way to make her run away (but this is another topic).

In the meantime, in spite of all of this, I still liked technical stuff (why wouldn&#39;t I, since I had made the choice to become an Engineer?)

So, being unable at this stage to distinguish what was true or wrong, and what I should do to ensure a good future, I decided that it would be a good compromise to have a general knowledge of IT and not stay stuck in area to specialized. I became an IT consultant in a respectable French Company. I told myself : &quot;This way, you stay in the technical world you like, but you’re not too bogged down in a geeky job, with the possibility to move into a better position, because everyone tells you to do so&quot;.
&lt;h3&gt;&lt;b&gt;Project Manager VS Developer?&lt;/b&gt;&lt;/h3&gt;
The truth is, in 2 years, I made lots of different things, as I had expected, and I even had the role of a project manager: I managed a man who was older than me to develop some internal software.

Here is what I’ve learned from this experience:

- Managing an IT project (even if this project is software development) should not be compared to developing software, the roles are completely different!

- It&#39;s neither easier nor harder: developing a simple script is easier than designing a full multi-replicated software architecture. Managing a  two-person team for a project is easier than being at the head of a strategical project involving lots of complicated political aspects.

On the one hand, someone masters algorithms, programming languages, software architectures, and is constantly thinking of the best way to solve a problem.

On the other hand, someone manages budgets, deadlines, human relationships, sends emails, creates reports, makes presentations.

Tell me why people want to create a hierarchical relationship between them? It&#39;s a complete nonsense and can lead to ridiculous and frustrating situations in which project managers are unable to understand code, set improbable deadlines to developers, and say &quot;well done&quot; to something easy but don&#39;t congratulate awesome work.

This kind of behaviour makes the actually good French developers flee to the United States, where founders know how to attract them, and how to keep them. The income of a French developer is ludicrously low compared to that of someone working in the Silicon Valley. This fact, among others, shows the inability of many French companies to see the value of a good developer. Managers use &lt;a href=&quot;http://www.ted.com/talks/lang/en/dan_pink_on_motivation.html&quot;&gt;the intrinsic motivation&lt;/a&gt; rather than a stick, providing a nice environment, making developers work on projects they actually enjoy, leaving them time to work on their personal projects, etc.
&lt;h3&gt;&lt;b&gt;Why I decided to quit my consulting job&lt;/b&gt;&lt;/h3&gt;
In a consulting world, you learn lots of different (technical or not) things. But you never choose which things you&#39;re going to learn. Even if this gives you a useful overview of the IT world, it quickly becomes frustrating because you have no time to master something. At best, you can be &quot;pretty good at something&quot;, until your client has a whole new problem.

But I think the more experience you get, the more you know what you enjoy doing, and therefore, the less you&#39;re satisfied with working on random topics. That&#39;s why I still think of consulting as a very good way to start a technical career.

Besides this, the only purpose of being a consultant is to make your client happy. Most of the time, your client doesn&#39;t care about good-looking source code, he often doesn&#39;t care whether what he&#39;s doing is good for the company or not, he cares about making his own superior happy to make his income increase at the end of the year.

Sometimes, as a &quot;simple&quot; consultant, and having to satisfy the client, you&#39;re forced to make stupid things like using script shell to create a program that requires object-oriented programming.

That&#39;s why I decided to leave the consulting world to focus on programming, probably on my own startup.
&lt;h3&gt;&lt;b&gt;The power of programming&lt;/b&gt;&lt;/h3&gt;
I see Programming as a way to create actual value with nothing else than a computer, a brain, and time. I feel very privileged to be able do that. No need for raw materials or financial funding. For someone like me who has always been interested in entrepreneurship, that&#39;s just awesome.

My actual motivation about mastering a programming language is the following: I tell myself: &quot;Whatever software ideas I may have, I can realize them&quot;. I know it&#39;s kind of naive because being able to develop software doesn&#39;t mean being able to create a startup.

But there are many different opportunities with being a good developer:

- Having the ability to start the effective development of the idea you get the day before can be very worthwhile if you are interested in software-based start-up development. It prevents you from wasting money on paying consultants the high price, and then postponing the day investors are required.

- If you dream about working abroad, having broadly wanted technical skills is a great way (among others) to be hired in a foreign company.

- Or sometimes, you just want to create something for fun, not for money...because it&#39;s a personal challenge, to help someone you like, or because you just need to create stuff to feel happy.

For all those reasons, I decided to focus on learning Python, Django, AngularJS, Ionic, and other stuff that was all fun, useful for my startup project, and valuable on the market at the same time. I learn a lot everyday, and I&#39;m so glad to have the opportunity to choose in which area I can make progress on.
&lt;h3&gt;&lt;b&gt;High hopes&lt;/b&gt;&lt;/h3&gt;
I&#39;ll conclude on a positive note because things seem to progressively change for Some &quot;Y Generation&quot; founders. They understand the importance of technical profiles in an innovation-based startup, and so, &lt;a href=&quot;http://www.guilhembertholet.com/blog/2012/03/12/comment-devenir-une-startup-developpeur-friendly/&quot;&gt;do everything they can to attract them in their startup&lt;/a&gt;. Plus, the ratio between supply and demand is very favorable to IT professionals, so recruiters need to try new methods to attract/keep them, in addition to raising incomes. Some French IT consulting firms like Octo seem to understand how to make technical guys happy.

What about you? What do you think of the French programming ecosystem?
</content>
            <author>
                <name>David Dahan</name>
            </author>
        </entry>
    
        <entry>
            <title type="html">Choisir Hebergement Web</title>
            <link href="http://www.david-dahan.com/post/choisir-hebergement-web"/>
            <published>2015-05-08T00:48:55+02:00</published>
            <id>http://www.david-dahan.com/post/choisir-hebergement-web</id>
            <content type="html">Bonjour bonjour !

Pour ce premier article, j&#39;ai décidé de m&#39;attaquer à un sujet en pleine évolution qu&#39;est l&#39;hébergement web. Au délà des différents hébergeurs, il y a de nombreux types d&#39;hébergements différents et il est parfois un peu compliqué de s&#39;y retrouver.

&lt;strong&gt;Quels sont les différents types d&#39;hébergement pour site web ?&lt;/strong&gt;

l&#39;IaaS : infrastructure as a service

Accès à une machine virtuelle (qu&#39;on appellera &lt;em&gt;VM&lt;/em&gt; par la suite)

&amp;nbsp;

&amp;nbsp;

&amp;nbsp;

&amp;nbsp;

&amp;nbsp;

// Besoins particuliers ? Haute dispo ?

&amp;nbsp;

&lt;strong&gt;Comment faire son choix ?&lt;/strong&gt;

// Est-ce un choix définitif ?

Non pas du tout. Commencer par du PaaS permet de gagner en rapidité de déploiement.

Cependant, si votre projet commence à avoir du succès, vous allez devoir ajouter des &quot;dynos&quot; pour assurer la charge. Au bout d&#39;un moment, la facture va vite être salée.

Concrètement, il est judicieux de migrer vers de l&#39;IaaS/VPS lorsque le surcout engendré par le PaaS est jugé inférieur au temps nécessaire pour migrer vers de l&#39;IaaS. J&#39;espère que je suis clair :)

puis passer à de l&#39;IaaS ou du VPS par la suite, quand les besoins en ressources seront trop ha

// Dans quel cas ce serait une mauvaise idée ?

-&amp;gt; Besoin de beaucoup de ressources dès le début (CPU/RAM). Les raisons peuvent être multiples :on est sûrs d&#39;avoir beaucoup de traffic très rapidement, le service qu&#39;on propose va faire par exemple de la génération de document ou utiliser des algorithmes qui consomment beaucoup de CPU/RAM.

-&amp;gt; Si on a des besoins particuliers. Ex : haute dispo / Fault Tolerance / Backups
</content>
            <author>
                <name>David Dahan</name>
            </author>
        </entry>
    
        <entry>
            <title type="html">Mapreduce Dataset Yelp</title>
            <link href="http://www.david-dahan.com/post/mapreduce-dataset-yelp"/>
            <published>2015-05-08T00:47:45+02:00</published>
            <id>http://www.david-dahan.com/post/mapreduce-dataset-yelp</id>
            <content type="html">Intro )

Le but ici va d&#39;être d&#39;analyser un jeu de données &lt;a href=&quot;http://www.yelp.com/dataset_challenge&quot;&gt;fourni par Yelp&lt;/a&gt; afin d&#39;en tirer des résultats utilisables, comme par exemple le nombre de mots positifs (&quot;awesome&quot;, &quot;good&quot;, ...) moyen par review.

Pour que ce soit techniquement drôle, on va faire comme si le dataset à analyser est tellement énorme qu&#39;on a absolument besoin de paralléliser les calculs sur 3 serveurs. Et comme je n&#39;ai pas la chance d&#39;avoir un datacenter à domicile, on utilisera 3 machines virtuelles créées pour l&#39;occasion sur mon HP microserver. Evidemment, vous pouvez déjà en déduire que d&#39;un point de vue performances, c&#39;est tout sauf pertinent, mais peu importe : le but ici est de tester l&#39;algorithme MapReduce en utilisant Hadoop, pas de battre des records de performance. Cela dit, si vous voulez reproduire ce tutoriel sur des serveurs physiques, faites vous plaisir !

Pour développer l&#39;algorithme de MapReduce, on utilisera le langage Python, tout simplement parce que l&#39;API streaming de Hadoop le permet, alors on ne va pas se priver !

Le code est disponible sur GitHub pour les curieux qui veulent s&#39;amuser.

Le but de cet article n&#39;étant pas d&#39;expliquer en long et en large ce qu&#39;est l&#39;algorithme MapReduce ou le framework Hadoop, si vous n&#39;êtes pas à l&#39;aise avec le sujet, je vous invite à lire ces excellents articles (en anglais) :

&lt;a href=&quot;http://www.glennklockwood.com/di/hadoop-overview.php&quot;&gt;Conceptual Overview of Map/Reduce and Hadoop&lt;/a&gt;

&lt;a href=&quot;http://www.glennklockwood.com/di/hadoop-streaming.php&quot;&gt;Writing Hadoop Applications in Python with Hadoop Streaming&lt;/a&gt;

Avant de commencer, un petit schéma récapitulatif de ce qu&#39;on va essayer de faire pour que vous y voyiez plus clair :

&amp;nbsp;

1) Installation des machines virtuelles

2) Installation du Frameworks Hadoop sur les noeuds

3) Développement du mapper et du reducer en Python
</content>
            <author>
                <name>David Dahan</name>
            </author>
        </entry>
    
        <entry>
            <title type="html">10 Facons Serveur</title>
            <link href="http://www.david-dahan.com/post/10-facons-serveur"/>
            <published>2015-05-08T00:44:49+02:00</published>
            <id>http://www.david-dahan.com/post/10-facons-serveur</id>
            <content type="html">Il y a quelques années, j&#39;ai fait l&#39;acquisition d&#39;un &lt;a href=&quot;http://www.amazon.fr/HP-658553-421-MicroServer-processeur-Contr%C3%B4leur/dp/B005LRCASM&quot;&gt;HP MicroServer&lt;/a&gt; pour environ 250€. Quésako ? C&#39;est un serveur comme un autre en fait, mais sa taille et son prix font de lui un compagnon parfait pour une petite start-up ou un particulier.

Avec tous les différents usages qu&#39;on peut en faire, vous allez vous rendre compte que ce n&#39;est pas qu&#39;un achat impulsif de geek qui souhaite à tout prix transformer son salon en datacenter ! Néanmoins, si vous souhaitez draguer une fille dans un bar, c&#39;est pas forcément le sujet le plus conseillé à aborder, je vous l&#39;accorde.

Allez c&#39;est parti, voyons voir tout ce qu&#39;on peut faire !

1) Serveur de fichier (NAS)

Pour que ce système soit viable, il faudra tout de même vous assurer d&#39;avoir un réseau local de bonne qualité. Prenez en compte par exemple qu&#39;en étant connecté à votre NAS via votre routeur wi-fi, ça sera difficile de lire des fichiers HD en temps réel. Au contraire, avec une connexion Ethernet directe à votre box, ça ne posera pas de problème à priori.

2) Serveur FTP

Vous avez besoin de partager 5Go de photos et de vidéos de vacances ? L&#39;upload risque d&#39;être long non ? Une solution simple consiste à créer un serveur FTP. Il suffit ensuite de créer un ou plusieurs accès pour les personnes supposées y accéder.

Note : ce protocole est un peu obsolète d&#39;un point de vue sécurité, donc lorsqu&#39;il n&#39;est pas utilisé, pensez à le désactiver, ça évitera que des gens s&#39;introduisent sur votre réseau.

3) Client BitTorrent

Vous êtes accroc au téléchargement ? Vous êtes du genre à laisser votre ordi tourner la nuit pour télécharger ? Pourquoi ne pas utiliser votre serveur pour jouer ce rôle ? Lui au moins, il tourne H24 par défaut, et si vous avez un NAS, les fichiers seront déjà dessus. En plus, certains programmes/scripts permettent même de télécharger automatiquement certains fichiers nouvellement disponibles, via des flux RSS. En gros, vous vous reveillez, et les fichiers que vous vouliez vous attendent tranquilement, la belle vie.

4) Serveur de sauvegarde (Rsync)

Imaginez votre maman qui vient tout juste d&#39;apprendre à transférer ses photos dans le dossier &quot;photo&quot; de son ordinateur. Vous espérez quand-même pas qu&#39;elle pense à les sauvegarder dans le claoud ?

L&#39;astuce, vous lui installez un client &lt;a href=&quot;http://fr.wikipedia.org/wiki/Rsync&quot;&gt;Rsync&lt;/a&gt; sur son ordinateur, et vous, vous vous occupez de la partie serveur. Concrètement, à des horaires définis, le contenu de son dossier &quot;photo&quot; sera synchronisé sur votre serveur. Et comme Rsync est intelligent, il va synchroniser juste le différentiel entre les deux dossiers, pour ne pas dévorer toute la bande passante. Evidemment, ça peut fonctionner en local, avec votre maman chez vous, mais aussi avec votre mamie qui habite à 50km, en passant cette fois-ci par Internet. Dans ce cas, on pensera à utiliser un VPN pour assurer un minimum de confidentialité sur les données transférées. Notez que Rsync est un logiciel libre, gratuit, multi OS, fiable et intelligent.

PS : Pensez à lui dire quand même que vous pouvez voir toutes ses photos, on sait jamais...

5) Hégerbeur de site web

Vous aussi les hébergeurs soi-disant gratuits vous n&#39;y croyez pas ?

Attention, n&#39;esperez pas atteindre une dispo de 99.99% dans votre propre maison. Une prise débranchée en passant l&#39;aspirateur, ça arrive ! Une coupure de courant EDF, une erreur de manip aussi.

6) Serveur d&#39;impression (CUPS)

Vous avez une bonne vieille imprimante réseau et vous voudriez qu&#39;elle puisse être utilisée par toute la famille, un petit serveur d&#39;impression CUPS est bien pratique. Ce dernier va permettre à n&#39;importe qui connecté au réseau local d&#39;installer l&#39;imprimante facilement. Certes, si vous avez une imprimante wi-fi, pas besoin !

7) Serveur Git

Vous développez en équipe et vous voulez votre propre serveur Git ? Pourquoi pas ! Là encore, le choix de ne pas prendre un serveur dans le cloud, à l&#39;heure où des services commes Github cartonnent, doit être mûrement réfléchi.

8) Hyperviseur (ESX ou Xen)

Là ça devient intéressant. Imaginez votre serveur comme un terrain de jeu géant, où vous pouvez ajouter des machines virtuelles, faire tous les tests que vous voulez, puis en supprimer. En fait, transformer votre serveur en hyperviseur va vous permettre de faire tous les usages qu&#39;on a vus ci-dessus, sans jamais avoir le risque de casser quelque chose.

Si vous voulez mettre un ESX, il faudra 4Go de RAM minimum.

9) VPN

Vous avez décidé de devenir agents secrets avec votre girl friend (oui je pars du principe que le lecteur est masculin), et vous décidez que tous vos échanges ne devront jamais être interceptés par les méchants américains de la NSA ? Pourtant, vous habitez à 300 Km l&#39;un de l&#39;autre et votre seul moyen de communication est Internet ? Ou vous êtes tout simplement parano ? Pas de soucis, vous allez utiliser un VPN, et donc créer un tunnel qui simulera une connexion locale avec votre partenaire, alors que le flux est encapsulé dans un protocole sécurisé. Si des données sont interceptées, elles seront indéchiffrables. Alors oui, ça pourrait être géré directement côté client, mais si on peut alléger sa machine en déportant ça sur le serveur, pourquoi se gêner ?

Le logiciel libre le plus connu est &lt;a href=&quot;https://openvpn.net/&quot;&gt;OpenVPN&lt;/a&gt;

&lt;strong&gt;Et moi alors dans tout ça comment je m&#39;en sers ?&lt;/strong&gt;

Lorsque ma friteuse et mon lave-linge sont allumés en même temps, les plombs sautent (si si j&#39;habite à Paris j&#39;vous jure). Du coup, pour tout ce qui est &quot;critique&quot;, j&#39;évite de me faire confiance en tant qu&#39;hébergeur web.

Je l&#39;utilise principalement comme NAS pour y mettre tous mes fichiers volumineux. Idéalement j&#39;aurais dû y mettre du &lt;a href=&quot;http://fr.wikipedia.org/wiki/RAID_%28informatique%29#RAID_1_:_Disques_en_miroir&quot;&gt;RAID 1&lt;/a&gt; pour m&#39;éviter une bête perte de données, mais j&#39;ai été feignant et placé mes fichiers plus importants (Photos, etc.) sur Dropbox (ce qui n&#39;est pas la meilleure des solutions puisque&lt;a href=&quot;http://college.wfu.edu/itg/scott-claybrook/2014/10/21/dropbox-is-not-a-backup-service/&quot;&gt; Dropbox n&#39;est pas un outil de sauvegarde&lt;/a&gt;).

Pour ne pas réinventer la roue, j&#39;utilise une distribution qui s&#39;appelle &lt;a href=&quot;http://www.openmediavault.org/&quot;&gt;OpenMediaVault&lt;/a&gt; et permet de gérer ça très facilement.

Cette distrib n&#39;est qu&#39;une machine virtuelle puisqu&#39;en fait sur mon serveur j&#39;ai installé un hyperviseur ESX (VmWare).

Pour ceux qui ne connaissent pas, vulgairement, ça me permet d&#39;installer différents systèmes d&#39;exploitations, sur mon unique serveur physiques. Chaque &quot;machine virtuelle&quot; a son propre système d&#39;exploitation, sa propre quantité de RAM, de disque, et de CPU alloués. Tout est donc cloisonné. Je profite donc régulièrement de mon serveur pour monter des VMs et faire des tests particuliers. Dernièrement, j&#39;ai créé 3 machines virtuelles pour tester le calcul distribué sous Hadoop par exemple.

&lt;strong&gt;Et vous, vous voyez un autre moyen intéressant d&#39;utiliser un votre home server ?&lt;/strong&gt;
</content>
            <author>
                <name>David Dahan</name>
            </author>
        </entry>
    
        <entry>
            <title type="html">Home Server Architecture</title>
            <link href="http://www.david-dahan.com/post/home-server-architecture"/>
            <published>2015-05-08T00:42:14+02:00</published>
            <id>http://www.david-dahan.com/post/home-server-architecture</id>
            <content type="html">Today, I&#39;d like to share my own home server architecture and then explain the choices I made. Before that, maybe we should clarify the &quot;Architecture&quot; term. As you know (or maybe not), an IT system can be seen from different points of view. Each of them bring different pieces of information. Depending on what you want to know/do, all these views can be interesting to you. Let&#39;s describe the 3 types of architecture :
&lt;h4&gt;Technical Architecture&lt;/h4&gt;
Technical architecture refers to the hardware used in your system. When you&#39;re thinking of technical architecture, you should answer these questions: what is the hardware used to make my IT system run? How these blocs are plugged together? This is indeed a simplification, but technical architecture can actually be drawn just by seeing the reality.

For example, &quot;a HP Micro Server&quot; can be linked to a &quot;Cisco Switch&quot; using an &quot;Ethernet Cable&quot;. All these stuff are physical, you can touch them, they compose the infrastructure of your IT system.
&lt;h4&gt;Logical/Software Architecture&lt;/h4&gt;
I could be hit for mixing logical and software architecture, but let&#39;s try to simplify it, saying that it&#39;s about the soft part running on the infrastructure we described above.

If your computer is the hardware part (technical architecture), what is running on your computer ? An operational system (Windows, OSX, Linux...), and what is running above your Operational system ? Software like your favorite web Browser, Word, Photoshop, World Of Warcraft, etc. Again, it&#39;s simplified, but we don&#39;t mind here. Just see L/S Architecture as logical blocs that can be next to each other, or embedded like Russian dolls (the OS contains the software)
&lt;h4&gt;Functional Architecture&lt;/h4&gt;
Function architecture identifies what &lt;strong&gt;functions&lt;/strong&gt; are available and how they interact together. When you&#39;re thinking of functional architecture, you must have a user view here and answer this question: what can the user do in the system? There is here absolutely no technical reference.

For example, &quot;send a file&quot;, &quot;convert file format&quot;, &quot;read a file&quot; are 3 functions that the user of our IT system could use.

Now this &quot;introduction&quot; is finished, let draw and describe (pictures and words !) the architecture&lt;strong&gt;s&lt;/strong&gt; of my home server.
&lt;h3&gt;Home Server Architectures&lt;/h3&gt;
[caption id=&quot;attachment_29&quot; align=&quot;aligncenter&quot; width=&quot;300&quot;]&lt;a href=&quot;http://david-dahan.com/blog/wp-content/uploads/logical_architecture.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-29&quot; src=&quot;http://david-dahan.com/blog/wp-content/uploads/logical_architecture-300x149.png&quot; alt=&quot;logical architecture&quot; width=&quot;300&quot; height=&quot;149&quot; /&gt;&lt;/a&gt; The Logical View[/caption]

[caption id=&quot;attachment_31&quot; align=&quot;aligncenter&quot; width=&quot;222&quot;]&lt;a href=&quot;http://david-dahan.com/blog/wp-content/uploads/physical_architecture.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-31&quot; src=&quot;http://david-dahan.com/blog/wp-content/uploads/physical_architecture-222x300.png&quot; alt=&quot;Physical Architecture&quot; width=&quot;222&quot; height=&quot;300&quot; /&gt;&lt;/a&gt; The Technical View[/caption]
</content>
            <author>
                <name>David Dahan</name>
            </author>
        </entry>
    
        <entry>
            <title type="html">Do It Yourself</title>
            <link href="http://www.david-dahan.com/post/do-it-yourself"/>
            <published>2015-05-08T00:41:05+02:00</published>
            <id>http://www.david-dahan.com/post/do-it-yourself</id>
            <content type="html">Why it&#39;s often better to do it yourself.

// Almost everything can be learnt.

// What are your motivations? Do you care about learning? doing? Or you just want getting things done, no matter who achieve the tasks?

// Rework

// Limitations

You have to agree with the fact that some tasks require a special talent. Maybe you have it, maybe not.
For example, I&#39;m thinking of graphics skills. It&#39;s pretty impossible to draw a logo by yourself if you never did this before.
</content>
            <author>
                <name>David Dahan</name>
            </author>
        </entry>
    
        <entry>
            <title type="html">Focus Python</title>
            <link href="http://www.david-dahan.com/post/focus-python"/>
            <published>2015-05-08T00:37:12+02:00</published>
            <id>http://www.david-dahan.com/post/focus-python</id>
            <content type="html">Why I chose Python as the language to learn, and why I chose to make a choice about which language to use?

Beaucoup de langages différents, de manière plus ou mons approfondie (C, C++, Java, Caml, Pascal, C#)

Frustration d&#39;en maitriser aucun

1) The language itself: It&#39;s really to learn, easy to write and it&#39;s easy to read other&#39;s code. The syntax is damn clean! There is no braces since code indentation has meaning.
Besides, it supports multiple programming paradigms: object-oriented, imperative and functional.

//screenshot de comparaison code Python et autre

2) I can do almost everything that I want to with this language : scripting on Unix environments (Python is installed by default), Web-site development (using for instance the awesome Django Framework), thick multi-OS programs with GUI (with TkInter for example), Games (with Pygame), etc.
Even if I know that playing with different languages (I dit it during school with C, C++, Java, Caml, etc..) allows the developer to understand better difficult concepts, in a real world where time is not infinite, I&#39;m convinced that it&#39;s more productive to have strong knowledge in Algorithm Analysis then focusing on mastering one versatile language, rather than trying to be the best at all.

// Limites : Javascript pour la partie front-end, nécessaire dans la trousse à outil du développeur web moderne.
</content>
            <author>
                <name>David Dahan</name>
            </author>
        </entry>
    
        <entry>
            <title type="html">How To Use Tags And Categories On GitHub Pages Without Plugins</title>
            <link href="http://www.david-dahan.com/post/tags-and-categories-on-github-pages"/>
            <published>2014-08-03T00:00:00+02:00</published>
            <id>http://www.david-dahan.com/post/tags-and-categories-on-github-pages</id>
            <content type="html">&lt;p&gt;&lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; service is just awesome!&lt;/p&gt;

&lt;p&gt;And with the jekyll integration it even get’s more awesome! :D&lt;/p&gt;

&lt;p&gt;But there are some limitations of this big automated system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no own plugins&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;limited available plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you may know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no tag / category plugins are (currently) available.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sad.. But that was something I really wanted to have!&lt;/p&gt;

&lt;p&gt;So I built my own Data-Template-NoPlugin-System and it works.&lt;/p&gt;

&lt;p&gt;You can see a live demo on this page.&lt;/p&gt;

&lt;p&gt;Here is a little guide how to implement it yourself:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;add some template logic on top of your &lt;strong&gt;post layout&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html+django&quot; data-lang=&quot;html+django&quot;&gt;&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.tags.size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;capture&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tags_content&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;Posted with &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.tags.size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fa fa-tag&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fa fa-tags&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;: &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endcapture&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post_tag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.tags&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data_tag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;site.data.tags&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
            &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data_tag.slug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post_tag&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
                &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data_tag&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
            &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
            &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;capture&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tags_content_temp&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tags_content&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/blog/tag/&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tag.slug&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tag.name&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;forloop&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;.last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;, &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endcapture&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
            &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tags_content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tags_content_temp&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tags_content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;place the generated tag content wherever you like inside your &lt;strong&gt;post layout&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;post-meta&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ tags_content }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;create a &lt;strong&gt;blog_by_tag&lt;/strong&gt; layout&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Articles by tag :{{ page.tag }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    {% if site.tags[page.tag] %}
        {% for post in site.tags[page.tag] %}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ post.url }}/&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        {% endfor %}
    {% else %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;There are no posts for this tag.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endif %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;annotate your &lt;strong&gt;post entry&lt;/strong&gt; front-matter block as usual:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;How To Use Tags And Categories On GitHub Pages Without Plugins&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;programming&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;github-pages&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for every used tag you have to add an entry inside your &lt;strong&gt;_data/tags.yml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;github-pages&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;GitHub Pages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for every used tag you have to add an empty template - e.g. &lt;strong&gt;blog/tag/github-pages.md&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;blog_by_tag&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;github-pages&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/blog/tag/github-pages/&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For a more complex implementation and categories: &lt;a href=&quot;https://github.com/minddust/minddust.github.io&quot;&gt;check out my repository&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Updates&lt;/strong&gt; (Feb. 12, 2015):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added missing `` (thanks &lt;a href=&quot;https://github.com/cdr255&quot;&gt;Christopher Rodriguez&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Updates&lt;/strong&gt; (Apr. 4, 2015):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch to absolute permalinks (which is forced by jekyll 2.0+)&lt;/li&gt;
&lt;/ul&gt;
</content>
            <author>
                <name>David Dahan</name>
            </author>
        </entry>
    
        <entry>
            <title type="html">fa2png.io</title>
            <link href="http://www.david-dahan.com/post/fa2png"/>
            <published>2014-05-27T00:00:00+02:00</published>
            <id>http://www.david-dahan.com/post/fa2png</id>
            <content type="html">&lt;p&gt;After a 12 hour hackathon we (&lt;a href=&quot;http://jannikweyrich.com/&quot;&gt;jannik&lt;/a&gt; and I) released &lt;a href=&quot;http://fa2png.io/&quot;&gt;fa2png.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s an Font-Awesome-To-PNG-Online-Converter.&lt;/p&gt;

&lt;p&gt;Follow the discussion on &lt;a href=&quot;https://news.ycombinator.com/item?id=7805594&quot;&gt;hackernews&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope you like it. Have fun =)&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Updates&lt;/strong&gt; (Jun. 2, 2014):&lt;/p&gt;

&lt;p&gt;Received a lot of feedback on twitter and stunningly 109 points on Hacker News.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/fa2png/hackernews-ranking.png&quot; alt=&quot;Hacker News Screenshot&quot;&gt;&lt;/p&gt;
</content>
            <author>
                <name>David Dahan</name>
            </author>
        </entry>
    
</feed>
